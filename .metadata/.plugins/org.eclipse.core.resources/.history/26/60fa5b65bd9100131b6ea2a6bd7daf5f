package com.krzysztof.m.swist.mygame;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.WindowManager;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.games.GamesActivityResultCodes;
import com.google.android.gms.games.GamesClient;
import com.google.android.gms.games.multiplayer.Invitation;
import com.google.android.gms.games.multiplayer.OnInvitationReceivedListener;
import com.google.android.gms.games.multiplayer.Participant;
import com.google.android.gms.games.multiplayer.realtime.RealTimeMessage;
import com.google.android.gms.games.multiplayer.realtime.RealTimeMessageReceivedListener;
import com.google.android.gms.games.multiplayer.realtime.Room;
import com.google.android.gms.games.multiplayer.realtime.RoomConfig;
import com.google.android.gms.games.multiplayer.realtime.RoomStatusUpdateListener;
import com.google.android.gms.games.multiplayer.realtime.RoomUpdateListener;
import com.krzysztof.m.swist.mygame.R;
import com.krzysztof.m.swist.utils.basegameutils.BaseGameActivity;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MainActivity extends BaseGameActivity implements
		EndGameFragment.Listener, GameplayFragment.Listener,
		MainMenuFragment.Listener, RealTimeMessageReceivedListener,
		RoomStatusUpdateListener, RoomUpdateListener,
		OnInvitationReceivedListener {

	private final int MIN_OPPONENTS = 1, MAX_OPPONENTS = 3;

	/*
	 * API INTEGRATION SECTION. This section contains the code that integrates
	 * the game with the Google Play game services API.
	 */

	// Debug tag
	final static boolean ENABLE_DEBUG = true;
	final static String TAG = "MyGame";

	// Request codes for the UIs that we show with startActivityForResult:
	private final static int RC_SELECT_PLAYERS = 10000;
	private final static int RC_INVITATION_INBOX = 10001;
	private final static int RC_WAITING_ROOM = 10002;

	// request codes we use when invoking an external activity
	final int RC_RESOLVE = 5000, RC_UNUSED = 5001;

	// Room ID where the currently active game is taking place; null if we're
	// not playing.
	String roomId = null;

	// Are we playing in multiplayer mode?
	// boolean mMultiplayer = false;

	// The participants in the currently active game
	ArrayList<Participant> participants = null;

	// My participant ID in the currently active game
	String myId = null;

	// If non-null, this is the id of the invitation we received via the
	// invitation listener
	String incomingInvitationId = null;

	// Message buffer for sending messages
	byte[] msgBuf = new byte[2];

	// flag indicating whether we're dismissing the waiting room because the
	// game is starting
	boolean waitRoomDismissedFromCode = false;

	Intent intent;
	
	private Map<Integer,String> scores = new HashMap<Integer,String>();

	EndGameFragment endGameFragment;
	GameplayFragment gameplayFragment;
	MainMenuFragment mainMenuFragment;
	Outbox outbox;

	/*
	 * COMMUNICATIONS SECTION. Methods that implement the game's network
	 * protocol.
	 */

	// Score of other participants. We update this as we receive their scores
	// from the network.
	Map<String, Integer> participantScore = new HashMap<String, Integer>();

	// Participants who sent us their final score.
	Set<String> finishedParticipants = new HashSet<String>();

	@Override
	public void onCreate(Bundle savedInstanceState) {
		enableDebugLog(ENABLE_DEBUG, TAG);
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		// create fragments
		endGameFragment = new EndGameFragment();
		gameplayFragment = new GameplayFragment();

		mainMenuFragment = new MainMenuFragment();
		gameplayFragment.setMainActivity(this);

		// set listeners
		endGameFragment.setListener(this);
		gameplayFragment.setListener(this);
		mainMenuFragment.setListener(this);

		getSupportFragmentManager().beginTransaction()
				.add(R.id.fragment_container, mainMenuFragment).commit();
		/*
		 * / set up a click listener for everything we care about for (int id :
		 * CLICKABLES) { findViewById(id).setOnClickListener(this); }
		 */

	}

	/**
	 * Called by the base class (BaseGameActivity) when sign-in has failed. For
	 * example, because the user hasn't authenticated yet. We react to this by
	 * showing the sign-in button.
	 */
	@Override
	public void onSignInFailed() {
		Log.d(TAG, "Sign-in failed.");
		mainMenuFragment.setShowSignIn(true);
		// switchToScreen(R.id.screen_sign_in);
	}

	/**
	 * Called by the base class (BaseGameActivity) when sign-in succeeded. We
	 * react by going to our main screen.
	 */
	@Override
	public void onSignInSucceeded() {
		Log.d(TAG, "Sign-in succeeded.");
		mainMenuFragment.setShowSignIn(false);

		// install invitation listener so we get notified if we receive an
		// invitation to play
		// a game.
		getGamesClient().registerInvitationListener(this);
		//
		// // if we received an invite via notification, accept it; otherwise,
		// go
		// // to main screen
		if (getInvitationId() != null) {
			acceptInviteToRoom(getInvitationId());
			return;
		}
		// switchToMainScreen();
	}

	// @Override
	// public void onClick(View v) {
	// Intent intent;
	//
	// switch (v.getId()) {
	// case R.id.button_single_player:
	// case R.id.button_single_player_2:
	// resetGameVars();
	// startGame(false);
	// break;
	// case R.id.button_sign_in:
	// // user wants to sign in
	// if (!verifyPlaceholderIdsReplaced()) {
	// showAlert("Error",
	// "Sample not set up correctly. Please see README.");
	// return;
	// }
	// beginUserInitiatedSignIn();
	// break;
	// case R.id.button_sign_out:
	// signOut();
	// switchToScreen(R.id.screen_sign_in);
	// break;
	// case R.id.button_invite_players:
	// // show list of invitable players
	// intent = getGamesClient().getSelectPlayersIntent(1, 3);
	// switchToScreen(R.id.screen_wait);
	// startActivityForResult(intent, RC_SELECT_PLAYERS);
	// break;
	// case R.id.button_see_invitations:
	// // show list of pending invitations
	// intent = getGamesClient().getInvitationInboxIntent();
	// switchToScreen(R.id.screen_wait);
	// startActivityForResult(intent, RC_INVITATION_INBOX);
	// break;
	// case R.id.button_accept_popup_invitation:
	// // user wants to accept the invitation shown on the invitation
	// // popup
	// // (the one we got through the OnInvitationReceivedListener).
	// acceptInviteToRoom(mIncomingInvitationId);
	// mIncomingInvitationId = null;
	// break;
	// case R.id.button_quick_game:
	// // user wants to play against a random opponent right now
	// startQuickGame();
	// break;
	// case R.id.button_click_me:
	// // (gameplay) user clicked the "click me" button
	// scoreOnePoint();
	// break;
	// }
	// }

	void startQuickGame() {
		// quick-start a game with 1 randomly selected opponent
		Bundle autoMatchCriteria = RoomConfig.createAutoMatchCriteria(
				MIN_OPPONENTS, MAX_OPPONENTS, 0);
		RoomConfig.Builder rtmConfigBuilder = RoomConfig.builder(this);
		rtmConfigBuilder.setMessageReceivedListener(this);
		rtmConfigBuilder.setRoomStatusUpdateListener(this);
		rtmConfigBuilder.setAutoMatchCriteria(autoMatchCriteria);
		// switchToScreen(R.id.screen_wait);
		// keepScreenOn();
		gameplayFragment.resetGameVars();
		getGamesClient().createRoom(rtmConfigBuilder.build());
	}

	@Override
	public void onActivityResult(int requestCode, int responseCode,
			Intent intent) {
		super.onActivityResult(requestCode, responseCode, intent);

		switch (requestCode) {
		case RC_SELECT_PLAYERS:
			// we got the result from the "select players" UI -- ready to create
			// the room
			handleSelectPlayersResult(responseCode, intent);
			break;
		case RC_INVITATION_INBOX:
			// we got the result from the "select invitation" UI (invitation
			// inbox). We're
			// ready to accept the selected invitation:
			handleInvitationInboxResult(responseCode, intent);
			break;
		case RC_WAITING_ROOM:
			// ignore result if we dismissed the waiting room from code:
			if (waitRoomDismissedFromCode)
				break;

			// we got the result from the "waiting room" UI.
			if (responseCode == Activity.RESULT_OK) {
				// player wants to start playing
				Log.d(TAG,
						"Starting game because user requested via waiting room UI.");

				// let other players know we're starting.
				broadcastStart();

				// start the game!
				// gameplayFragment.startGame(true);
				SwitchToFragment(gameplayFragment);
			} else if (responseCode == GamesActivityResultCodes.RESULT_LEFT_ROOM) {
				// player actively indicated that they want to leave the room
				leaveRoom();
			} else if (responseCode == Activity.RESULT_CANCELED) {
				/*
				 * Dialog was cancelled (user pressed back key, for instance).
				 * In our game, this means leaving the room too. In more
				 * elaborate games,this could mean something else (like
				 * minimizing the waiting room UI but continue in the handshake
				 * process).
				 */
				leaveRoom();
			}

			break;
		}
	}

	// Handle the result of the "Select players UI" we launched when the user
	// clicked the
	// "Invite friends" button. We react by creating a room with those players.
	private void handleSelectPlayersResult(int response, Intent data) {
		if (response != Activity.RESULT_OK) {
			Log.w(TAG, "*** select players UI cancelled, " + response);
			SwitchToFragment(mainMenuFragment);
			return;
		}

		Log.d(TAG, "Select players UI succeeded.");

		// get the invitee list
		final ArrayList<String> invitees = data
				.getStringArrayListExtra(GamesClient.EXTRA_PLAYERS);
		Log.d(TAG, "Invitee count: " + invitees.size());

		// get the automatch criteria
		Bundle autoMatchCriteria = null;
		int minAutoMatchPlayers = data.getIntExtra(
				GamesClient.EXTRA_MIN_AUTOMATCH_PLAYERS, 0);
		int maxAutoMatchPlayers = data.getIntExtra(
				GamesClient.EXTRA_MAX_AUTOMATCH_PLAYERS, 0);
		if (minAutoMatchPlayers > 0 || maxAutoMatchPlayers > 0) {
			autoMatchCriteria = RoomConfig.createAutoMatchCriteria(
					minAutoMatchPlayers, maxAutoMatchPlayers, 0);
			Log.d(TAG, "Automatch criteria: " + autoMatchCriteria);
		}

		// create the room
		Log.d(TAG, "Creating room...");
		RoomConfig.Builder rtmConfigBuilder = RoomConfig.builder(this);
		rtmConfigBuilder.addPlayersToInvite(invitees);
		rtmConfigBuilder.setMessageReceivedListener(this);
		rtmConfigBuilder.setRoomStatusUpdateListener(this);
		if (autoMatchCriteria != null) {
			rtmConfigBuilder.setAutoMatchCriteria(autoMatchCriteria);
		}
		// switchToScreen(R.id.screen_wait);
		keepScreenOn();
		gameplayFragment.resetGameVars();
		getGamesClient().createRoom(rtmConfigBuilder.build());
		Log.d(TAG, "Room created, waiting for it to be ready...");
	}

	// Handle the result of the invitation inbox UI, where the player can pick
	// an invitation
	// to accept. We react by accepting the selected invitation, if any.
	private void handleInvitationInboxResult(int response, Intent data) {
		if (response != Activity.RESULT_OK) {
			Log.w(TAG, "*** invitation inbox UI cancelled, " + response);
			SwitchToFragment(mainMenuFragment);
			return;
		}

		Log.d(TAG, "Invitation inbox UI succeeded.");
		Invitation inv = data.getExtras().getParcelable(
				GamesClient.EXTRA_INVITATION);

		// accept invitation
		acceptInviteToRoom(inv.getInvitationId());
	}

	// Accept the given invitation.
	void acceptInviteToRoom(String invId) {
		// accept the invitation
		Log.d(TAG, "Accepting invitation: " + invId);
		RoomConfig.Builder roomConfigBuilder = RoomConfig.builder(this);
		roomConfigBuilder.setInvitationIdToAccept(invId)
				.setMessageReceivedListener(this)
				.setRoomStatusUpdateListener(this);
		// switchToScreen(R.id.screen_wait);
		keepScreenOn();
		gameplayFragment.resetGameVars();
		getGamesClient().joinRoom(roomConfigBuilder.build());
	}

	// Activity is going to the background. We have to leave the current room.
	@Override
	public void onStop() {
		Log.d(TAG, "**** got onStop");

		// if we're in a room, leave it.
		leaveRoom();

		// stop trying to keep the screen on
		stopKeepingScreenOn();

		SwitchToFragment(mainMenuFragment);
		super.onStop();
	}

	// Activity just got to the foreground. We switch to the wait screen because
	// we will now
	// go through the sign-in flow (remember that, yes, every time the Activity
	// comes back to the
	// foreground we go through the sign-in flow -- but if the user is already
	// authenticated,
	// this flow simply succeeds and is imperceptible).
	@Override
	public void onStart() {
		// switchToScreen(R.id.screen_wait);
		super.onStart();
		SwitchToFragment(mainMenuFragment);
	}

	// Handle back key to make sure we cleanly leave a game if we are in the
	// middle of one
	// @Override
	// public boolean onKeyDown(int keyCode, KeyEvent e) {
	// if (keyCode == KeyEvent.KEYCODE_BACK && mCurScreen == R.id.screen_game) {
	// leaveRoom();
	// return true;
	// }
	// return super.onKeyDown(keyCode, e);
	// }

	// Leave the room.
	void leaveRoom() {
		Log.d(TAG, "Leaving room.");
		// mSecondsLeft = 0;
		stopKeepingScreenOn();
		if (roomId != null) {
			getGamesClient().leaveRoom(this, roomId);
			roomId = null;
			SwitchToFragment(mainMenuFragment);
			// switchToScreen(R.id.screen_wait);
		} else {
			SwitchToFragment(mainMenuFragment);
			// switchToMainScreen();
		}
	}

	// Show the waiting room UI to track the progress of other players as they
	// enter the
	// room and get connected.
	void showWaitingRoom(Room room) {
		waitRoomDismissedFromCode = false;

		// minimum number of players required for our game
		final int MIN_PLAYERS = 2;
		Intent i = getGamesClient().getRealTimeWaitingRoomIntent(room,
				MIN_PLAYERS);

		// show waiting room UI
		startActivityForResult(i, RC_WAITING_ROOM);
	}

	// Forcibly dismiss the waiting room UI (this is useful, for example, if we
	// realize the
	// game needs to start because someone else is starting to play).
	void dismissWaitingRoom() {
		waitRoomDismissedFromCode = true;
		finishActivity(RC_WAITING_ROOM);
	}

	// Called when we get an invitation to play a game. We react by showing that
	// to the user.
	@Override
	public void onInvitationReceived(Invitation invitation) {
		// We got an invitation to play a game! So, store it in
		// mIncomingInvitationId
		// and show the popup on the screen.
		incomingInvitationId = invitation.getInvitationId();
		((TextView) findViewById(R.id.incoming_invitation_text))
				.setText(invitation.getInviter().getDisplayName() + " "
						+ getString(R.string.is_inviting_you));
		// switchToScreen(mCurScreen); // This will show the invitation popup
	}

	/*
	 * CALLBACKS SECTION. This section shows how we implement the several games
	 * API callbacks.
	 */

	// Called when we are connected to the room. We're not ready to play yet!
	// (maybe not everybody
	// is connected yet).
	@Override
	public void onConnectedToRoom(Room room) {
		Log.d(TAG, "onConnectedToRoom.");

		// get room ID, participants and my ID:
		roomId = room.getRoomId();
		participants = room.getParticipants();
		myId = room.getParticipantId(getGamesClient().getCurrentPlayerId());

		// print out the list of participants (for debug purposes)
		Log.d(TAG, "Room ID: " + roomId);
		Log.d(TAG, "My ID " + myId);
		Log.d(TAG, "<< CONNECTED TO ROOM>>");
	}

	// Called when we've successfully left the room (this happens a result of
	// voluntarily leaving
	// via a call to leaveRoom(). If we get disconnected, we get
	// onDisconnectedFromRoom()).
	// @Override
	public void onLeftRoom(int statusCode, String roomId) {
		// we have left the room; return to main screen.
		Log.d(TAG, "onLeftRoom, code " + statusCode);
		SwitchToFragment(mainMenuFragment);
	}

	// Called when we get disconnected from the room. We return to the main
	// screen.
	// @Override
	public void onDisconnectedFromRoom(Room room) {
		roomId = null;
		showGameError();
	}

	// Show error message about game being cancelled and return to main screen.
	void showGameError() {
		showAlert(getString(R.string.error), getString(R.string.game_problem));
		SwitchToFragment(mainMenuFragment);
	}

	// Called when room has been created
	// @Override
	public void onRoomCreated(int statusCode, Room room) {
		Log.d(TAG, "onRoomCreated(" + statusCode + ", " + room + ")");
		if (statusCode != GamesClient.STATUS_OK) {
			Log.e(TAG, "*** Error: onRoomCreated, status " + statusCode);
			showGameError();
			return;
		}

		// show the waiting room UI
		showWaitingRoom(room);
	}

	// Called when room is fully connected.
	// @Override
	public void onRoomConnected(int statusCode, Room room) {
		Log.d(TAG, "onRoomConnected(" + statusCode + ", " + room + ")");
		if (statusCode != GamesClient.STATUS_OK) {
			Log.e(TAG, "*** Error: onRoomConnected, status " + statusCode);
			showGameError();
			return;
		}
		updateRoom(room);
	}

	@Override
	public void onJoinedRoom(int statusCode, Room room) {
		Log.d(TAG, "onJoinedRoom(" + statusCode + ", " + room + ")");
		if (statusCode != GamesClient.STATUS_OK) {
			Log.e(TAG, "*** Error: onRoomConnected, status " + statusCode);
			showGameError();
			return;
		}

		// show the waiting room UI
		showWaitingRoom(room);
	}

	// We treat most of the room update callbacks in the same way: we update our
	// list of
	// participants and update the display. In a real game we would also have to
	// check if that
	// change requires some action like removing the corresponding player avatar
	// from the screen,
	// etc.
	@Override
	public void onPeerDeclined(Room room, List<String> arg1) {
		updateRoom(room);
	}

	@Override
	public void onPeerInvitedToRoom(Room room, List<String> arg1) {
		updateRoom(room);
	}

	@Override
	public void onPeerJoined(Room room, List<String> arg1) {
		updateRoom(room);
	}

	@Override
	public void onPeerLeft(Room room, List<String> peersWhoLeft) {
		updateRoom(room);
	}

	@Override
	public void onRoomAutoMatching(Room room) {
		updateRoom(room);
	}

	@Override
	public void onRoomConnecting(Room room) {
		updateRoom(room);
	}

	@Override
	public void onPeersConnected(Room room, List<String> peers) {
		updateRoom(room);
	}

	@Override
	public void onPeersDisconnected(Room room, List<String> peers) {
		updateRoom(room);
	}

	void updateRoom(Room room) {
		participants = room.getParticipants();
		updatePeerScoresDisplay();
	}

	// Called when we receive a real-time message from the network.
	// Messages in our game are made up of 2 bytes: the first one is 'F' or 'U'
	// indicating
	// whether it's a final or interim score. The second byte is the score.
	// There is also the
	// 'S' message, which indicates that the game should start.
	@Override
	public void onRealTimeMessageReceived(RealTimeMessage rtm) {
		byte[] buf = rtm.getMessageData();
		String sender = rtm.getSenderParticipantId();
		Log.d(TAG, "Message received: " + (char) buf[0] + "/" + (int) buf[1]);

		if (buf[0] == 'F' || buf[0] == 'U') {
			// score update.
			int existingScore = participantScore.containsKey(sender) ? participantScore
					.get(sender) : 0;
			int thisScore = (int) buf[1];
			if (thisScore > existingScore) {
				// this check is necessary because packets may arrive out of
				// order, so we
				// should only ever consider the highest score we received, as
				// we know in our
				// game there is no way to lose points. If there was a way to
				// lose points,
				// we'd have to add a "serial number" to the packet.
				participantScore.put(sender, thisScore);
			}

			// update the scores on the screen
			updatePeerScoresDisplay();

			// if it's a final score, mark this participant as having finished
			// the game
			if ((char) buf[0] == 'F') {
				finishedParticipants.add(rtm.getSenderParticipantId());
			}
		} else if (buf[0] == 'S') {
			// someone else started to play -- so dismiss the waiting room and
			// get right to it!
			Log.d(TAG, "Starting game because we got a start message.");
			dismissWaitingRoom();
			SwitchToFragment(gameplayFragment);
		}
	}

	// Broadcast my score to everybody else.
	void broadcastScore(boolean finalScore) {
		if (gameplayFragment.getGameType() != GameType.MULTIPLAYER)
			return; // playing single-player mode

		// First byte in message indicates whether it's a final score or not
		msgBuf[0] = (byte) (finalScore ? 'F' : 'U');

		// Second byte is the score.
		msgBuf[1] = (byte) gameplayFragment.getScore();

		// Send to every other participant.
		for (Participant p : participants) {
			if (p.getParticipantId().equals(myId))
				continue;
			if (p.getStatus() != Participant.STATUS_JOINED)
				continue;
			if (finalScore) {
				// final score notification must be sent via reliable message
				getGamesClient().sendReliableRealTimeMessage(null, msgBuf,
						roomId, p.getParticipantId());
			} else {
				// it's an interim score notification, so we can use unreliable
				getGamesClient().sendUnreliableRealTimeMessage(msgBuf, roomId,
						p.getParticipantId());
			}
		}
	}

	// Broadcast a message indicating that we're starting to play. Everyone else
	// will react
	// by dismissing their waiting room UIs and starting to play too.
	private void broadcastStart() {
		if (gameplayFragment.getGameType() != GameType.MULTIPLAYER)
			return; // playing single-player mode

		msgBuf[0] = 'S';
		msgBuf[1] = (byte) 0;
		for (Participant p : participants) {
			if (p.getParticipantId().equals(myId))
				continue;
			if (p.getStatus() != Participant.STATUS_JOINED)
				continue;
			getGamesClient().sendReliableRealTimeMessage(null, msgBuf, roomId,
					p.getParticipantId());
		}
	}

	/*
	 * UI SECTION. Methods that implement the game's UI.
	 */

	// This array lists everything that's clickable, so we can install click
	// event handlers.
	// final static int[] CLICKABLES = { R.id.button_accept_popup_invitation,
	// R.id.button_invite_players, R.id.button_quick_game,
	// R.id.button_see_invitations, R.id.button_sign_in,
	// R.id.button_sign_out, R.id.button_click_me,
	// R.id.button_single_player, R.id.button_single_player_2 };
	//
	// // This array lists all the individual screens our game has.
	// final static int[] SCREENS = { R.id.screen_game, R.id.screen_main,
	// R.id.screen_sign_in, R.id.screen_wait };
	// int mCurScreen = -1;

	// void switchToScreen(int screenId) {
	// // make the requested screen visible; hide all others.
	// for (int id : SCREENS) {
	// findViewById(id).setVisibility(
	// screenId == id ? View.VISIBLE : View.GONE);
	// }
	// mCurScreen = screenId;
	//
	// // should we show the invitation popup?
	// boolean showInvPopup;
	// if (mIncomingInvitationId == null) {
	// // no invitation, so no popup
	// showInvPopup = false;
	// } else if (mMultiplayer) {
	// // if in multiplayer, only show invitation on main screen
	// showInvPopup = (mCurScreen == R.id.screen_main);
	// } else {
	// // single-player: show on main screen and gameplay screen
	// showInvPopup = (mCurScreen == R.id.screen_main || mCurScreen ==
	// R.id.screen_game);
	// }
	// findViewById(R.id.invitation_popup).setVisibility(
	// showInvPopup ? View.VISIBLE : View.GONE);
	// }

	// updates the screen with the scores from our peers
	private void updatePeerScoresDisplay() {
		//gameplayFragment.setScores(participantScore);
		//gameplayFragment.updateScoresDisplay();
		String scores[]= new String[4];
		//((TextView) gameplayFragment.getView().findViewById(R.id.score0)).setText(gameplayFragment.formatScore(gameplayFragment.getScore()) + " - Me");
		scores[0]=gameplayFragment.formatScore(gameplayFragment.getScore()) + " - Me";
		//int[] arr = { R.id.score1, R.id.score2, R.id.score3 };
//		int i = 1;
//
//		if (roomId != null) {
//			for (Participant p : participants) {
//				String pid = p.getParticipantId();
//				//if (pid.equals(myId))
//					//continue;
//				if (p.getStatus() != Participant.STATUS_JOINED)
//					continue;
//				int score = participantScore.containsKey(pid) ? participantScore
//						.get(pid) : 0;
//				//((TextView) findViewById(arr[i])).setText(gameplayFragment.formatScore(score) + " - " + p.getDisplayName());
//						scores[i]=gameplayFragment.formatScore(score) + " - " + p.getDisplayName();
//				++i;
//			}
//		}
//
//		for (; i < scores.length; ++i) {
//			scores[i]="";
//			//((TextView) findViewById(arr[i])).setText("");
//		}
		gameplayFragment.setScores(scores);
	}

	/*
	 * MISC SECTION. Miscellaneous methods.
	 */

	// Sets the flag to keep this screen on. It's recommended to do that during
	// the
	// handshake when setting up a game, because if the screen turns off, the
	// game will be
	// cancelled.
	private void keepScreenOn() {
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
	}

	// Clears the flag that keeps the screen on.
	private void stopKeepingScreenOn() {
		getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
	}

	@Override
	public void onP2PConnected(String participantId) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onP2PDisconnected(String participantId) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onEndGameScreenDismissed() {
		SwitchToFragment(mainMenuFragment);
	}

	private void SwitchToFragment(Fragment newFragment) {
		getSupportFragmentManager().beginTransaction()
				.replace(R.id.fragment_container, newFragment).commit();
	}

	@Override
	public void onGameEnd() {
		int score = gameplayFragment.getScore();

		outbox = new Outbox();
		outbox.setScore(score);

		// check for achievements
		checkForAchievements();

		// update leaderboards
		updateLeaderboards();

		// push those accomplishments to the cloud, if signed in
		pushAccomplishments();
		endGameFragment.setScore(score);
		SwitchToFragment(endGameFragment);
	}

	@Override
	public void onStartGameRequested(GameType gameType) {
		if (gameType == GameType.SINGLEPLAYER) {
			gameplayFragment.setGameType(gameType);
			SwitchToFragment(gameplayFragment);
		} else {
			startQuickGame();
		}

	}

	@Override
	public void onShowAchievementsRequested() {
		if (isSignedIn()) {
			startActivityForResult(getGamesClient().getAchievementsIntent(),
					RC_UNUSED);
		} else {
			showAlert(getString(R.string.achievements_not_available));
		}
	}

	@Override
	public void onShowLeaderboardsRequested() {
		if (isSignedIn()) {
			startActivityForResult(getGamesClient().getAllLeaderboardsIntent(),
					RC_UNUSED);
		} else {
			showAlert(getString(R.string.leaderboards_not_available));
		}

	}

	@Override
	public void onSignInButtonClicked() {
		beginUserInitiatedSignIn();
	}

	@Override
	public void onSignOutButtonClicked() {
		signOut();
		mainMenuFragment.setShowSignIn(true);
	}

	@Override
	public void onInvatePlayersButtonClicked() {
		intent = getGamesClient().getSelectPlayersIntent(1, 3);
		// switchToScreen(R.id.screen_wait);
		startActivityForResult(intent, RC_SELECT_PLAYERS);

	}

	@Override
	public void onSeeInvitationsButtonClicked() {
		intent = getGamesClient().getInvitationInboxIntent();
		// switchToScreen(R.id.screen_wait);
		startActivityForResult(intent, RC_INVITATION_INBOX);
	}

	private void unlockAchievement(int achievementId, String fallbackString) {
		if (isSignedIn()) {
			getGamesClient().unlockAchievement(getString(achievementId));
		} else {
			Toast.makeText(this,
					getString(R.string.achievement) + ": " + fallbackString,
					Toast.LENGTH_LONG).show();
		}
	}

	private void achievementToast(String achievement) {
		// Only show toast if not signed in. If signed in, the standard Google
		// Play
		// toasts will appear, so we don't need to show our own.
		if (!isSignedIn()) {
			Toast.makeText(this,
					getString(R.string.achievement) + ": " + achievement,
					Toast.LENGTH_LONG).show();
		}
	}

	private void pushAccomplishments() {
		if (isSignedIn()) {
			// can't push to the cloud, so save locally
			outbox.saveLocal(this);
			return;
		}
		if (outbox.getOver10points()) {
			getGamesClient().unlockAchievement(
					getString(R.string.achievement_over_10_points));
			outbox.setOver10points(false);
		}

		outbox.saveLocal(this);
	}

	private void checkForAchievements() {
		// Check if each condition is met; if so, unlock the corresponding
		// achievement.
		if (gameplayFragment.getScore() > 10) {
			outbox.setOver10points(true);
			achievementToast(getString(R.string.achievement_over_10_points));
		}

	}

	private void updateLeaderboards() {
		if (outbox.getScore() < gameplayFragment.getScore()) {
			outbox.setScore(gameplayFragment.getScore());

		}
	}
}
