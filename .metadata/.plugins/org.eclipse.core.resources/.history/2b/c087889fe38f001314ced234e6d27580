package com.krzysztof.m.swist.mygame;

import android.widget.Toast;
import android.content.Context;

public class EndGameCloudResults {

	private int score;
	private Outbox outbox = new Outbox();
	void checkForAchievements() {
        // Check if each condition is met; if so, unlock the corresponding
        // achievement.
        if (score>10) {
            outbox.setOver10points(true);
            achievementToast(getString(R.string.achievement_prime_toast_text));
        }
        
    }

    void unlockAchievement(int achievementId, String fallbackString) {
        if (isSignedIn()) {
            getGamesClient().unlockAchievement(getString(achievementId));
        } else {
            Toast.makeText(this, getString(R.string.achievement) + ": " + fallbackString,
                    Toast.LENGTH_LONG).show();
        }
    }

    void achievementToast(String achievement) {
        // Only show toast if not signed in. If signed in, the standard Google Play
        // toasts will appear, so we don't need to show our own.
        if (!isSignedIn()) {
            Toast.makeText(this, getString(R.string.achievement) + ": " + achievement,
                    Toast.LENGTH_LONG).show();
        }
    }

    void pushAccomplishments() {
        if (!isSignedIn()) {
            // can't push to the cloud, so save locally
            mOutbox.saveLocal(this);
            return;
        }
        if (mOutbox.mPrimeAchievement) {
            getGamesClient().unlockAchievement(getString(R.string.achievement_prime));
            mOutbox.mPrimeAchievement = false;
        }
        if (mOutbox.mArrogantAchievement) {
            getGamesClient().unlockAchievement(getString(R.string.achievement_arrogant));
            mOutbox.mArrogantAchievement = false;
        }
        if (mOutbox.mHumbleAchievement) {
            getGamesClient().unlockAchievement(getString(R.string.achievement_humble));
            mOutbox.mHumbleAchievement = false;
        }
        if (mOutbox.mLeetAchievement) {
            getGamesClient().unlockAchievement(getString(R.string.achievement_leet));
            mOutbox.mLeetAchievement = false;
        }
        if (mOutbox.mBoredSteps > 0) {
            getGamesClient().incrementAchievement(getString(R.string.achievement_really_bored),
                    mOutbox.mBoredSteps);
            getGamesClient().incrementAchievement(getString(R.string.achievement_bored),
                    mOutbox.mBoredSteps);
        }
        if (mOutbox.mEasyModeScore >= 0) {
            getGamesClient().submitScore(getString(R.string.leaderboard_easy),
                    mOutbox.mEasyModeScore);
            mOutbox.mEasyModeScore = -1;
        }
        if (mOutbox.mHardModeScore >= 0) {
            getGamesClient().submitScore(getString(R.string.leaderboard_hard),
                    mOutbox.mHardModeScore);
            mOutbox.mHardModeScore = -1;
        }
        mOutbox.saveLocal(this);
    }

    /**
     * Update leaderboards with the user's score.
     *
     * @param finalScore The score the user got.
     */
    void updateLeaderboards() {
        if (outbox.getScore() < score) {
            mOutbox.mHardModeScore = finalScore;
        
    }
}
